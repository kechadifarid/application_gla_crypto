name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Étape 1 : Récupérer le code source
    - name: Checkout Code
      uses: actions/checkout@v3

    # Étape 2 : Configurer PHP
    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, intl, pdo, pgsql, xdebug
        tools: composer

    # Étape 3 : Configurer Xdebug
    - name: Configure Xdebug
      run: |
        mkdir -p ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d
        echo "xdebug.mode=coverage" >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/xdebug.ini
        echo "xdebug.start_with_request=no" >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/xdebug.ini

    # Étape 4 : Vérifier la version de PHP
    - name: Verify PHP Version
      run: php --version

    # Étape 5 : Vérifier les fichiers du projet
    - name: List Files in src and tests
      run: |
        echo "Files in src:"
        ls -la src/
        echo "Files in tests:"
        ls -la tests/

    # Étape 6 : Nettoyer et réinstaller les dépendances
    - name: Remove Dependencies and Cache
      run: |
        rm -rf vendor composer.lock
        composer clear-cache
    - name: Install Dependencies
      run: composer install --no-progress --prefer-dist
    - name: Dump Autoload
      run: composer dump-autoload -o

    # Étape 7 : Exécuter les tests PHPUnit avec couverture
    - name: Run PHPUnit Tests
      run: vendor/bin/phpunit --coverage-clover=coverage.xml

    # Étape 8 : Analyser avec SonarQube
    - name: SonarQube Analysis
      env:
        SONAR_HOST_URL: http://<IP_SONARQUBE>:9000
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        sonar-scanner \
          -Dsonar.projectKey=my-php-project \
          -Dsonar.php.coverage.reportPaths=coverage.xml \
          -Dsonar.sources=src
